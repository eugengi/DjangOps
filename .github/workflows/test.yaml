---
  name: tests
  on:
    workflow_run:
      workflows: ["build"]
      types: [completed]
      branches: [main]
    pull_request:
      branches:
        - "**"
      paths:
        - 'src/**'
        - 'requirements/**'
        - 'tests/**'
        - 'test_utils/**'
        - '.github/actions/**/*.yaml'
        - '.github/workflows/test.yaml'

  jobs:
    check-build:
      runs-on: ubuntu-latest
      if: >
        github.event.workflow_run.conclusion == 'success' ||
        github.event_name == 'pull_request'
      outputs:
        should-run: ${{ steps.check.outputs.result }}
      steps:
        - name: Check build status
          id: check
          run: |
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "result=true" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
              echo "result=true" >> $GITHUB_OUTPUT
            else
              echo "result=false" >> $GITHUB_OUTPUT
            fi

    test:
      needs: check-build
      if: needs.check-build.outputs.should-run == 'true'
      name: Testing
      runs-on: ${{ matrix.os }}
      strategy:
        fail-fast: false
        matrix:
          os:
            - ubuntu-latest
          python-version:
            - "3.10"
            - "3.11"
            - "3.12"
          django-version:
            - django42
            - django50

      services:
        postgres:
          image: postgres:17.5-alpine3.22
          ports:
            - 5432:5432
          options: >-
            --health-cmd="pg_isready -U postgres"
            --health-interval=10s
            --health-timeout=5s
            --health-retries=5
          env:
            POSTGRES_DB: ${{ secrets.DB_NAME }}
            POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
            POSTGRES_USER: ${{ secrets.DB_USER }}

      steps:
        - name: Checkout code
          uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

        - name: Download build artifacts
          uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
          with:
            name: build-env-${{ matrix.os }}-py${{ matrix.python-version }}-${{ matrix.django-version }}
          continue-on-error: true

        - name: Set up Python CI
          uses: ./.github/actions/setup-python-ci
          with:
            python-version: ${{ matrix.python-version }}

        - name: Restore build cache
          id: cache-restore
          uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684  # v4.2.3
          with:
            path: |
              .tox
            key: |
              build-${{ runner.os }} \
              -py${{ matrix.python-version }} \
              -${{ matrix.django-version }} \
              -${{ hashFiles( 'requirements/base.txt', 'requirements/prod.txt', 'requirements/uv.txt') }}
            restore-keys: |
              build-${{ runner.os }}-py${{ matrix.python-version }}-${{ matrix.django-version }}-

        - name: Fallback - recreate environment
          if: steps.cache-restore.outputs.cache-hit != 'true'
          run: |
            echo "Cache miss detected, rebuilding tox environment..."
            tox -e ${{ matrix.django-version }} --notest

        - name: Run Tests
          env:
            # tell `tox-gh` which mapping to use from the [gh] section.
            TOX_GH_MAJOR_MINOR: ${{ matrix.python-version }}

            # env variables.
            ALLOWED_HOSTS: ${{ vars.ALLOWED_HOSTS }}
            DB_ENGINE: ${{ vars.DB_ENGINE }}
            DB_HOST: ${{ vars.DB_HOST }}
            DB_PORT: ${{ vars.DB_PORT }}
            DEBUG: ${{ vars.DEBUG }}
            ENVIRONMENT: ${{ vars.ENVIRONMENT }}
            # secrets variable.
            DB_NAME: ${{ secrets.DB_NAME }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
            DB_USER: ${{ secrets.DB_USER }}
            SECRET_KEY: ${{ secrets.SECRET_KEY }}

          run: tox run --skip-pkg-install --skip-missing-interpreters false
